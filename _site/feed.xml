<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>寞踪的博客</title>
    <description>寞踪的技术博客，主攻PHP，iOS，Python，Linux，C。</description>
    <link>http://xpmozong.github.io/</link>
    <atom:link href="http://xpmozong.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 12 Nov 2015 14:00:27 +0800</pubDate>
    <lastBuildDate>Thu, 12 Nov 2015 14:00:27 +0800</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>烈火灼心观后感</title>
        <description>&lt;p&gt;有的人天生就做不了坏人，有的人天生就是十恶不赦的坏人。&lt;/p&gt;

&lt;p&gt;本性不坏的人，一不小心做了错事，会内疚一生，会想办法补偿。&lt;/p&gt;

&lt;p&gt;烈火灼心从片头开始就是紧张灰色的基调，有个灭门惨案，三个逃犯逃到别的地方生存，还收养一个小女孩，一直都相安无事，阿道当出租车司机，辛小丰当协警，陈比觉当养鱼的，他们的养女叫尾巴。七年，竟然来了个头，还很碰巧的那个头调查过那个灭门惨案，更碰巧的是，那个头能力很强，责任心强，眼光敏锐。伊警官有次找小丰谈话，他说：“我很喜欢法律，只要不触碰到底线就没事，但是越过那到线，法律不容情，所以法律既人性又无情。”&lt;/p&gt;

&lt;p&gt;就是这么令人心情沉重的电影，突然来了那么两段，让我很想笑，又笑不出来。有次追两个台湾逃犯的过程中，那个拿斧子的哥们，是来搞笑的吧，自己来那么个一下，自己掉下去了，我对这个超级无语啊，这个要是在独木桥上上，那么个一下掉到小河里，我能笑个半死，但是却在几十层楼高的地方，那么个一下，此处省略号。。。。。。&lt;/p&gt;

&lt;p&gt;影片最后，陈比觉大发牢骚，说自己智商163，阿道和小丰这两傻逼，但是见不到尾巴，没法活，最后来句：看来这智商163跟80的没区别嘛。然后跳崖了。。。。。。&lt;/p&gt;

&lt;p&gt;同样色调沉重的，我还看过另外一部电影，麦俊龙和苍井空主演的《复仇者之死》，这部电影看的让我很绝望，不知道该说些什么，在一系列的报复下，结局也很悲惨。旁观者已麻木。&lt;/p&gt;

&lt;p&gt;还有一部电影，也很沉重，《狗咬狗》，真的是狗咬狗啊，为了生存，拼死命啊。&lt;/p&gt;

&lt;p&gt;人心很复杂，像美国跟伊拉克的战争，有很多大兵为了前线的战友，一次又一次的去战场。辛小丰为了尾巴当GAY，有的人可以为了别人做很多无法完成的事，有的人自私起来，又不顾后果，像那个杀人犯老大，从他描述的犯罪过程中，感受不到他一丝丝的忏悔。&lt;/p&gt;

&lt;p&gt;人分为三类人，牧羊犬，羊，狼。充当牧羊犬角色的人，很少，像警察之类的，大部分是羊，少部分是狼。这个看个人选择，但是面对狼，要坚决抵抗。《美国狙击手》中，他的家庭教育，是要充当牧羊犬角色的人。美国好多电影，不管是涉及文化、政治、犯罪的，都表现出来，让大众评判。&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Nov 2015 00:00:00 +0800</pubDate>
        <link>http://xpmozong.github.io/movie/2015/11/02/liehuozhuoxin/</link>
        <guid isPermaLink="true">http://xpmozong.github.io/movie/2015/11/02/liehuozhuoxin/</guid>
        
        <category>movie</category>
        
        
        <category>movie</category>
        
      </item>
    
      <item>
        <title>Redis 集群</title>
        <description>&lt;p&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;redis 集群部署，针对两台以上服务器的部署，一个主服务器，多个从服务器。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tar zxvf redis-2.8.12.tar.gz
cd redis-2.8.12
make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建文件夹并且拷贝&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir /usr/redis

cp redis.conf /usr/redis
cd src
cp redis-server /usr/redis
cp redis-cli /usr/redis
cp redis-benchmark /usr/redis
cp mkreleasehdr.sh /usr/redis
cp redis-check-aof /usr/redis
cp redis-check-dump /usr/redis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改redis.conf文件 daemonize no 改为 yes # 是否后台运行&lt;/p&gt;

&lt;p&gt;复制启动文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp redis-2.8.12/utils/redis_init_script /etc/init.d/redis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改某些路径后。加入chkconfig&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chkconfig --add redis
service redis start/stop #启动/关闭
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改 vim ~/.bash_profile&lt;/p&gt;

&lt;p&gt;添加一行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PATH=$PATH:/usr/redis
source ~/.bash_profile #重启
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就能启动 redis-cli 了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主从分配&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;主服务器开启192.168.1.2:6379端口&lt;/p&gt;

&lt;p&gt;从服务器修改redis.conf配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slave-read-only no
slaveof 192.168.1.2 6379
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;PHP程序主从&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;具体的PHP如何主从调用，请看&lt;a href=&quot;https://github.com/xpmozong&quot; target=&quot;_blank&quot;&gt;wavephp&lt;/a&gt;框架&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;未来架构设想&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Redis多集群，多服务器，多从服务器部署，采用zookeeper架构&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://xpmozong.github.io/redis/2015/08/28/redis-jiqun/</link>
        <guid isPermaLink="true">http://xpmozong.github.io/redis/2015/08/28/redis-jiqun/</guid>
        
        <category>Redis</category>
        
        
        <category>Redis</category>
        
      </item>
    
      <item>
        <title>php opcache使用</title>
        <description>&lt;p&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;php opcache的缓存原理，主要是避免php重复编译，减少CPU和内存开销。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;到http://pecl.php.net/package/ZendOpcache下载&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tar zxvf zendopcache-7.0.5.tgz
cd zendopcache-7.0.5
phpize
./configure
make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;配置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;修改php.ini，在最后添加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Zend Opcache]
zend_extension = &quot;/usr/local/php-5.4.10/lib/php/extensions/no-debug-non-zts-20100525/opcache.so&quot;
opcache.force_restart_timeout=3600
opcache.memory_consumption=1024
opcache.optimization_level=1
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=4096
opcache.revalidate_freq=60
opcache.fast_shutdown=1
opcache.enable=1
opcache.enable_cli=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;启动&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;重启php-fpm或者apache/nginx&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;查看&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;phpinfo中，Zend OPcache&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Cache hits 
Cache misses
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看这两个值&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;压力测试&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1、未使用opcache&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./ab -n 100 -c 100 http://127.0.0.1/phpinfo.php

This is ApacheBench, Version 2.3 &amp;lt;$Revision: 655654 $&amp;gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient).....done

Server Software:        nginx
Server Hostname:        127.0.0.1
Server Port:            80

Document Path:          /phpinfo.php
Document Length:        56203 bytes

Concurrency Level:      100
Time taken for tests:   1.849 seconds
Complete requests:      100
Failed requests:        4
   (Connect: 0, Receive: 0, Length: 4, Exceptions: 0)
Write errors:           0
Total transferred:      5635595 bytes
HTML transferred:       5620295 bytes
Requests per second:    54.08 [#/sec] (mean)
Time per request:       1848.981 [ms] (mean)
Time per request:       18.490 [ms] (mean, across all concurrent requests)
Transfer rate:          2976.51 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    3   0.9      3       4
Processing:    45 1190 312.7   1137    1805
Waiting:       39 1182 316.0   1137    1805
Total:         45 1193 312.3   1141    1807

Percentage of the requests served within a certain time (ms)
  50%   1141
  66%   1262
  75%   1403
  80%   1482
  90%   1658
  95%   1726
  98%   1759
  99%   1807
 100%   1807 (longest request)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2、使用opcache&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./ab -n 100 -c 100 http://127.0.0.1/phpinfo.php
 
This is ApacheBench, Version 2.3 &amp;lt;$Revision: 655654 $&amp;gt;
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Licensed to The Apache Software Foundation, http://www.apache.org/

Benchmarking 127.0.0.1 (be patient).....done

Server Software:        nginx
Server Hostname:        127.0.0.1
Server Port:            80

Document Path:          /phpinfo.php
Document Length:        60436 bytes

Concurrency Level:      100
Time taken for tests:   0.238 seconds
Complete requests:      100
Failed requests:        12
   (Connect: 0, Receive: 0, Length: 12, Exceptions: 0)
Write errors:           0
Total transferred:      6058888 bytes
HTML transferred:       6043588 bytes
Requests per second:    419.62 [#/sec] (mean)
Time per request:       238.312 [ms] (mean)
Time per request:       2.383 [ms] (mean, across all concurrent requests)
Transfer rate:          24828.30 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    3   0.8      3       5
Processing:    11  164  70.1    218     228
Waiting:        5  164  70.3    217     228
Total:         11  167  69.5    219     231

Percentage of the requests served within a certain time (ms)
  50%    219
  66%    224
  75%    226
  80%    227
  90%    229
  95%    230
  98%    231
  99%    231
 100%    231 (longest request)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用opcache使php执行效率提高不少。&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Aug 2015 00:00:00 +0800</pubDate>
        <link>http://xpmozong.github.io/php/2015/08/19/php-opcache/</link>
        <guid isPermaLink="true">http://xpmozong.github.io/php/2015/08/19/php-opcache/</guid>
        
        <category>PHP</category>
        
        
        <category>PHP</category>
        
      </item>
    
      <item>
        <title>倚天屠龙记读后感</title>
        <description>&lt;p&gt;看了1年多的金庸武侠小说，写些读后感，就从我看的第一部金庸小说倚天屠龙记说起。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;武林争端：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;武林至尊，宝刀屠龙，号令天下，莫敢不从，倚天不出，谁与争锋。武林的一切纷争，都是由这两把刀剑引起的。&lt;br /&gt;
倚天屠龙记里的大魔头混元霹雳手成昆，为了报私仇，设计让金毛狮王谢逊四处杀人，为明教树下无数武林公敌。说到底，就是为报仇，掺和了一群人。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;人物情感分析：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;殷素素是个漂亮，任性，聪明，对爱情不顾一切的人，她也不是特别坏，当她和殷野王设计从俞岱岩那夺到屠龙刀之后，殷野王将俞岱岩踢到江里就不管了，但是她却将俞岱岩救起来，重金让镖局的将人送到武当，但是俞岱岩被少林大力金刚指伤到残废。殷素素对张翠山一见钟情，她假扮张翠山，杀了少林很多人，就是为张翠山的三师哥报仇。所以殷素素是个矛盾的人，残忍又好心。张翠山虽然对殷素素那杀人不眨眼的手段不满，但见她对自己情深一片，不忍心看着她受伤不管。我觉得张翠山喜欢殷素素完全是因为不忍心，他不忍心拒绝别人的好意，然后日久生情。&lt;/p&gt;

&lt;p&gt;赵敏，我对赵敏这个人无感，怎么说呢，因为赵敏就是人人口中“别人家的孩子”。漂亮，聪明，有一大群人可供使唤，喜欢谁，她就一直追谁，不顾一切。&lt;/p&gt;

&lt;p&gt;周芷若就比较内敛了，心里藏的事太多，喜欢张无忌，又不敢表现的太强烈，师命难违。周芷若向往成为有身份的人，书中写到，她看到赵敏坐在城头，风光无限，只留一声叹息。当她知道张无忌无帝王之心，心里是落寞的。周芷若是那种很努力，却事事事与愿违的人。张无忌是喜欢周芷若的，如果周芷若会像赵敏那样不顾一切的爱他，他是不会喜欢赵敏的。当他误以为赵敏杀死殷梨，发誓要杀她，但当真的面对她的时候，又不忍心杀她，反而救她。当他知道是周芷若杀死殷梨时，他也不忍心杀芷若，反而还安慰她。这几个姑娘在张无忌的心中都很重要。&lt;br /&gt;
张无忌对芷若说：“芷若，我对你一向敬重，对殷家表妹心生感激，对小昭是意存怜惜，但对赵姑娘却是……却是铭心刻骨的相爱。”&lt;/p&gt;

&lt;p&gt;作者在后记表示张无忌对感情始终拖泥带水，对于周芷若、赵敏、殷梨、小昭这四个姑娘，似乎他对赵敏爱得最深，最后对周芷若也这般说了，但他内心深处，到底爱哪一个姑娘更加多些？恐怕他自己也不知道。&lt;br /&gt;
我最喜欢殷家表妹，因为她率直，有仇必报，善良，专情，有点糊里糊涂，虽然她并不怎么出色。&lt;br /&gt;
大多数男的会喜欢小昭多些，谁都希望有个完全无私奉献自己的美女在身边。&lt;/p&gt;

&lt;p&gt;金庸的多数小说，总是有个悲剧的男二，对女主死心塌地的追，女主却不喜欢他。宋青书为周芷若断指，因为芷若，错手杀死莫声谷，被陈友谅威胁，后被逐出武当，本来前途光明，却因为感情的事一错再错。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;明教：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;光明左右使者（逍遥二使，左使杨逍，右使范遥）&lt;/p&gt;

&lt;p&gt;紫白金青四王（紫衫龙王黛绮丝，白眉鹰王殷天正，金毛狮王谢逊，青翼蝠王韦一笑）&lt;/p&gt;

&lt;p&gt;五散人（彭和尚彭莹玉、铁冠道人张中、布袋和尚说不得、冷面先生冷谦和周颠五人）&lt;/p&gt;

&lt;p&gt;五旗四门（金木水火土五旗，天地风雷四门）&lt;/p&gt;

&lt;p&gt;里面最搞笑的就是周颠，出语无状，动辄骂人，行事怪僻，专好斗嘴，就是那张嘴，气的任何人都想揍他！&lt;/p&gt;

&lt;p&gt;杨逍比较风流潇洒，武艺高强，心高气傲，与峨眉的恩怨情仇挺多的。年轻时气死了峨眉的一位师太孤鸿子。那个师太也太搞笑了，与杨逍相约比武，为了确保胜算向师妹灭绝师太借了倚天剑，没想到倚天剑尚未出鞘就被杨逍击败，剑也被杨逍夺去。但是杨逍拿着剑竟然笑道：“倚天剑好大的名气！可在我眼中，却不过是一堆破铜烂铁！”竟然弃剑而去。孤鸿子受到如此大的侮辱，气病而死。后来相识纪晓芙，还生了孩子。闹得峨眉恨不得把明教连根拔了！他的女儿杨不悔，竟然爱上了当年追求她娘的武当殷梨亭。&lt;/p&gt;

&lt;p&gt;金花婆婆原来是紫衫龙王黛绮丝，后来爱上来找阳顶天报仇的韩千叶。非得跟灭绝师太一较高下，不惜借屠龙刀，知道灭绝死了，又逼周芷若跟她比武，额，，，非得比出个高下才满意。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;六大派：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;峨眉派：灭绝师太武功是灭剑式，绝剑式，四象掌，峨嵋九阳功。&lt;/p&gt;

&lt;p&gt;华山派：鲜于通武功是三光剑法，封喉钉。&lt;/p&gt;

&lt;p&gt;崆峒派：五老武功七伤拳。&lt;/p&gt;

&lt;p&gt;昆仑派：何太冲夫妇武功是无声无色剑招，昆仑剑法一十五式。&lt;/p&gt;

&lt;p&gt;少林派：空闻大师武功大力金刚掌。&lt;/p&gt;

&lt;p&gt;武当派：张三丰太极拳太极剑法，真武七截阵。&lt;/p&gt;

&lt;p&gt;武当七侠宋远桥、俞莲舟、俞岱岩、张松溪、张翠山、殷梨亭、莫声谷，金庸在后记表示武当七侠兄弟般的情义比男女之情更是小说的重点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;武功秘籍：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;九阳神功：源自《九阳真经》，与九阴真经相比，九阴真经偏向外用，九阳神功偏向内功。九阳神功并无明显招式，练成后，内力自生速度奇快，无穷无尽，普通拳脚也能使出绝大攻击力；防御力无可匹敌，自动护体功能反弹外力攻击；习者轻功身法胜过世上所有轻功精妙高手；更是疗伤圣典，百毒不侵，专门克破所有寒性和阴性内力。&lt;/p&gt;

&lt;p&gt;七伤拳：崆峒派传世绝世武功，乃崆峒派祖师木灵子所创，此拳法出拳时声势煊赫，一拳中有七股不同的劲力，或刚猛、或阴柔、或刚中有柔，或柔中有刚，或横出，或直送，或内缩，敌人抵挡不住这源源而来的劲力，便会深受内伤。七伤拳倘由内力未臻化境的人来练，对自己便有极大伤害。人体内有阴阳二气、金木水火土五行，一练七伤，七者皆伤。所谓“七伤”，乃是先伤己，再伤人。&lt;/p&gt;

&lt;p&gt;乾坤大挪移：源自波斯明教，乃镇教之宝。其根本道理也并不如何奥妙，只不过先要激发自身潜力，然后牵引挪移，但其中变化神奇，却是匪夷所思。&lt;/p&gt;

&lt;p&gt;太极拳剑：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;张三丰：“无忌，我这套太极剑法，你记住了多少？”
张无忌：“已忘记了一小半。”
张三丰：“好，那也为难了你，你自己去想想罢。”
……
张三丰：“现下怎样了？”
张无忌：“已经忘记一大半了。”
张三丰：“好，我再使一遍。”
……
张三丰：“孩儿，怎样啦？”
张无忌：“还有三招没忘记。”
……
张无忌：“这我可全忘了，忘得干干净净的了。”
张三丰：“不坏，不坏！忘得真快，你这就请八臂神剑指教吧！” 说着将手中木剑递了给他。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;龙爪手：属于少林七十二绝技之一，为少林寺秘传指功真谛。古朴易学，进步神速，功效奇大，苦练30日即可达到双臂二指禅靠墙倒立、铁指开砖碎瓦、凌空插碎1—3厘米厚木板、捏碎酒杯、砖块、核桃、折断铜钱，击穿碗碟等奇效。功成后手指坚硬逾钢，铁指开砖如泥，手如钢爪般抓树撕皮，搓石成粉，并能演示一指禅倒立，一指钻砖、二指走路，剑指开顽石等铁指神功，随意挥手即可碎砖断石，瞬间致敌于伤残。&lt;/p&gt;

&lt;p&gt;圣火令神功：波斯的「山中老人」所创，张无忌深明九阳神功、挪移乾坤、以及武当派太极拳的拳理，圣火令上的武功虽奇，究不过是旁门左道之学而达于巅峰而已，说到宏广精深。远远不及上述三门武学。&lt;/p&gt;

&lt;p&gt;大力金刚指：亦称指禅功，点穴手，鹰爪擒拿手。指禅功在武林中各家练法不尽相同，但到精髓处都是以内功辅外功练习。&lt;/p&gt;

&lt;p&gt;真武七截阵：武当派祖师张三丰所创的一种阵式，武当派的镇派绝技，七人联手使用，相当于六十四位当世一流高手同时出。&lt;/p&gt;

&lt;p&gt;金刚伏魔圈：少林三神僧渡厄、渡劫、渡难（三渡）会此功。三人坐了30多年的枯禅，心意相通，一人动念，其余两人立即会意，便能组成坚实阵法，即「金刚伏魔圈」。&lt;/p&gt;

&lt;p&gt;寒冰绵掌：青翼蝠王韦一笑的独门绝技，因练此武功走火入魔，三阴脉络受损，是以每次激引内力之前不得不吸人血以抑制寒毒。&lt;/p&gt;

&lt;p&gt;幻阴指：有点像生死符，一道阴寒内力附着在你体内，而且会游走在你四肢百骸，因为是附着并且移动的，不是专门克制的内力，很难根治。&lt;/p&gt;

&lt;p&gt;玄冥神掌：百损道人所创的一种阴毒无比的掌法，掌力犹如排山倒海相似，一股极阴寒的内力冲将过来，对手霎时间全身寒冷透骨，受者身现绿色五指掌印，寒毒入体，触手冰冷，宛似摸到一块寒冰一般、背心上一处宛似炭炙火烧，四周却是寒冷彻骨，寒毒入体，发作时痛苦难当，九死一生。&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Jul 2015 00:00:00 +0800</pubDate>
        <link>http://xpmozong.github.io/book/2015/07/03/yitiantulongji/</link>
        <guid isPermaLink="true">http://xpmozong.github.io/book/2015/07/03/yitiantulongji/</guid>
        
        <category>Book</category>
        
        
        <category>book</category>
        
      </item>
    
      <item>
        <title>iOS 图文混排</title>
        <description>&lt;p&gt;1、M80AttributedLabel的URL、号码、邮箱的正则匹配不是很好，我做了一些修改。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pragma mark - 正则匹配电话号码，网址链接，Email地址
+ (NSArray *)addRexArr:(NSString *)text
{
    NSString *parten = @&quot;\\d{3}-\\d{8}|\\d{3}-\\d{7}|\\d{4}-\\d{8}|\\d{4}-\\d{7}|1+[358]+\\d{9}|\\d{8}|\\d{7}&quot;;
    NSArray *resultArray = [text componentsMatchedByRegex:parten];
    NSMutableArray *phoneArray = [[NSMutableArray alloc] initWithArray:resultArray];
    NSMutableArray *urlArray = [[NSMutableArray alloc] init];
    NSMutableArray *emailArray = [[NSMutableArray alloc] init];
    
    NSString *parten4 = @&quot;[^\\s]*(\\.)(com|cn|net|org|biz|info|cc|tv|name|中国|mobi|me|asia|co|so|tel)[a-zA-Z\\d\\/]*&quot;;
    NSArray *resultArray4 = [text componentsMatchedByRegex:parten4];
    for (NSString *str in resultArray4) {
        BOOL isMatch = NO;
        
        NSString *parten3 = @&quot;(https?)+://[^\\s]*[a-zA-Z\\d\\.]*(\\.)(com|cn|net)[a-zA-Z\\d\\/]*&quot;;
        NSArray *resultArray3 = [str componentsMatchedByRegex:parten3];
        for (NSString *s in resultArray3) {
            isMatch = YES;
            [urlArray addObject:s];
        }
        
        NSString *parten2 = @&quot;(www\\.)[^\\s]*(\\.)(com|cn|net|org|biz|info|cc|tv|name|中国|mobi|me|asia|co|so|tel)[a-zA-Z\\d\\/]*&quot;;
        NSArray *resultArray2 = [str componentsMatchedByRegex:parten2];
        for (NSString *s in resultArray2) {
            isMatch = YES;
            [urlArray addObject:s];
        }
        
        NSString *parten4 = @&quot;[^\\s]*[a-zA-Z\\d\\.]*(@)[a-z\\d]*(\\.)(com|cn|net|org|biz|info|cc|tv|name|mobi|me|asia|co|so|tel)&quot;;
        NSArray *resultArray4 = [str componentsMatchedByRegex:parten4];
        for (NSString *s in resultArray4) {
            isMatch = YES;
            [emailArray addObject:s];
        }
        
        if (isMatch == NO) {
            [urlArray addObject:str];
        }
        
        for (NSString *p in resultArray) {
            NSArray *resultArray3 = [str componentsMatchedByRegex:p];
            if ([resultArray3 count] &amp;gt; 0) {
                [phoneArray removeObject:p];
            }
        }
    }

    NSMutableArray *array = [[NSMutableArray alloc] init];
    [array addObject:urlArray];
    [array addObject:phoneArray];
    [array addObject:emailArray];
    
    return array;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;调用的时候，如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSArray *rexArray = [M80AttributedLabel addRexArr:label.labelText];
NSArray *httpArr = [rexArray objectAtIndex:0];
NSArray *phoneNumArr = [rexArray objectAtIndex:1];
NSArray *emailArr = [rexArray objectAtIndex:2];
if ([emailArr count]) {
    for (NSString *emailStr in emailArr) {
        [label addCustomLink:[NSURL URLWithString:emailStr] forRange:[label.labelText rangeOfString:emailStr] linkType:LinkTypeEmail];
    }
}
if ([phoneNumArr count]) {
    for (NSString *phoneNum in phoneNumArr) {
        [label addCustomLink:[NSURL URLWithString:phoneNum] forRange:[label.labelText rangeOfString:phoneNum] linkType:LinkTypePhone];
    }
}
if ([httpArr count]) {
    for (NSString *httpStr in httpArr) {
        [label addCustomLink:[NSURL URLWithString:httpStr] forRange:[label.labelText rangeOfString:httpStr] linkType:LinkTypeURL];
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2、还有表情的添加，原来只能单个加图片，如果图文都有，比如：开心哦[大笑]，哦也！   其中[大笑]是一个笑的图片。如何分割显示呢？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSRegularExpression *regex = [[NSRegularExpression alloc]
                              initWithPattern:@&quot;(.*?)(\\[*+\\]|\\Z)&quot;
                              options:NSRegularExpressionCaseInsensitive|NSRegularExpressionDotMatchesLineSeparators
                              error:nil];
NSArray* chunks = [regex matchesInString:text options:0
                                   range:NSMakeRange(0, [text length])];
for (NSTextCheckingResult *b in chunks) {
    NSString *bstr = [text substringWithRange:b.range];
    if (bstr.length &amp;gt; 0) {
        NSString *imgName = [_m_emojiDictionary objectForKey:bstr];
        if (imgName) {
            UIImage *image = [UIImage imageNamed:imgName];
            [label appendImage:image
                       maxSize:CGSizeMake(24, 24)
                        margin:UIEdgeInsetsZero
                     alignment:M80ImageAlignmentCenter];
        }else{
            NSArray *array = [bstr componentsSeparatedByString:@&quot;[&quot;];
            int i = 0;
            for (NSString *str in array) {
                if (i == 0) {
                    [label appendText:str];
                }else{
                    NSString *astr = [NSString stringWithFormat:@&quot;[%@&quot;, str];
                    NSString *imgName = [_m_emojiDictionary objectForKey:astr];
                    if (imgName) {
                        UIImage *image = [UIImage imageNamed:imgName];
                        [label appendImage:image
                                   maxSize:CGSizeMake(24, 24)
                                    margin:UIEdgeInsetsZero
                                 alignment:M80ImageAlignmentCenter];
                    }else{
                        [label appendText:astr];
                    }
                }
                i++;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;详情代码参考，&lt;a href=&quot;https://github.com/xpmozong/Socket&quot; target=&quot;_blank&quot;&gt;https://github.com/xpmozong/Socket&lt;/a&gt;，WeiWei这个项目。&lt;/p&gt;

</description>
        <pubDate>Sun, 21 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://xpmozong.github.io/ios/2014/12/21/ios-tuwenhunpai/</link>
        <guid isPermaLink="true">http://xpmozong.github.io/ios/2014/12/21/ios-tuwenhunpai/</guid>
        
        <category>iOS</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>iOS FMDB Sqlite封装</title>
        <description>&lt;p&gt;1、在使用FMDB的时候，总是出现崩溃的情况，报错信息总是提示某某表被锁住。为了解决这一问题，我做了封装。&lt;/p&gt;

&lt;p&gt;DBConnect.h如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &quot;FMDB.h&quot;
#import &quot;FMResultSet.h&quot;

@interface DBConnect : NSObject

@property (nonatomic, retain) FMDatabase *dataBase;  // 数据库类
@property (nonatomic, retain) FMDatabaseQueue *dbQueue;

/// 通过单例的方式
+ (DBConnect *)shareConnect;

/// 打开数据库
- (void)openDatabase;

/// 判断是否存在表
- (BOOL)isTableOK:(NSString *)tableName;

/// 创建表
- (BOOL)createTableSql:(NSString *)sql;

/// 获得数据
- (NSArray *)getDBlist:(NSString *)sql;

/// 获得单条数据
- (NSDictionary *)getDBOneData:(NSString *)sql;

/// 统计数量
- (int)getDBDataCount:(NSString *)sql;

/// 执行sql (主要用来执行插入操作)
- (unsigned)executeInsertSql:(NSString *)sql;

/// 更新操作，删除操作
- (void)executeUpdateSql:(NSString *)sql;

/// 关闭数据库
- (void)closeDatabase;

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DBConnect.m如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#import &quot;DBConnect.h&quot;
#import &quot;FMDB.h&quot;
#define SQLNAME @&quot;mytable.sqlite&quot;

@implementation DBConnect

static DBConnect *dBHandle;

+ (DBConnect *)shareConnect
{
    if (dBHandle == nil) {
        dBHandle = [[DBConnect alloc] init];
        [dBHandle openDatabase];
    }
    return dBHandle;
}

+ (NSString *)bundleSQLPath
{
    return [[NSBundle mainBundle] pathForResource:@&quot;mytable&quot; ofType:@&quot;sqlite&quot;];
}

/// 打开数据库
- (void)openDatabase
{
    NSString *sqlPath = [[self getDocumentPath] stringByAppendingPathComponent:SQLNAME];
    NSLog(@&quot;%@&quot;, sqlPath); // 拼接字符串
    
    NSFileManager *fm = [NSFileManager defaultManager];
    if ([fm fileExistsAtPath:sqlPath] == NO) {
        NSString *bundleSQLPath = [DBConnect bundleSQLPath];
        NSError *err = nil;
        [fm copyItemAtPath:bundleSQLPath toPath:sqlPath error:&amp;amp;err];
        if (err != nil) {
            NSLog(@&quot;copy db fail %@&quot;, [err localizedDescription]);
        }
    }
    
    self.dataBase = [FMDatabase databaseWithPath:sqlPath];
    self.dbQueue = [FMDatabaseQueue databaseQueueWithPath:sqlPath];
    NSLog(@&quot;self.dbQueue==%@&quot;, self.dbQueue);
    [_dataBase open];
    if (![_dataBase open]) {
        NSLog(@&quot;数据库打开失败&quot;);
    }else{
        NSLog(@&quot;数据库打开成功&quot;);
    }
}

/// 获得document文件的路径
- (NSString *)getDocumentPath
{
    NSString *documentPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0]; // 获取document文件的路径
    return documentPath;
}

/// 判断是否存在表
- (BOOL)isTableOK:(NSString *)tableName
{
    NSString *sql = [NSString stringWithFormat:@&quot;SELECT count(*) as &#39;count&#39; FROM sqlite_master WHERE type =&#39;table&#39; and name = &#39;%@&#39;&quot;, tableName];
    int count = [self getDBDataCount:sql];
    NSLog(@&quot;Table count===%d&quot;, count);
    if (count &amp;gt; 0) {
        return YES;
    }
    
    return NO;
}

/// 创建表
- (BOOL)createTableSql:(NSString *)sql
{
    [self executeInsertSql:sql];
    return YES;
}

/// 获得数据
- (NSArray *)getDBlist:(NSString *)sql
{
    __block NSMutableArray *list = [[NSMutableArray alloc] init];
    NSLog(@&quot;%@&quot;, sql);
    
    [self.dbQueue inTransaction:^(FMDatabase *db, BOOL *rollback) {
        
        [db executeStatements:sql withResultBlock:^int(NSDictionary *dictionary) {
            
            [list addObject:dictionary];
            
            return 0;
        }];
        
    }];
    
    return list;
}

/// 获得单条数据
- (NSDictionary *)getDBOneData:(NSString *)sql
{
    __block NSMutableArray *list = [[NSMutableArray alloc] init];
    NSLog(@&quot;%@&quot;, sql);
    
    [self.dbQueue inTransaction:^(FMDatabase *db, BOOL *rollback) {
        
        [db executeStatements:sql withResultBlock:^int(NSDictionary *dictionary) {
            
            [list addObject:dictionary];
            
            return 0;
        }];
        
    }];
    
    if (list.count == 1) {
        return [list objectAtIndex:0];
    }
    
    return nil;
}

/// 统计数量
- (int)getDBDataCount:(NSString *)sql
{
    int count = 0;
    __block NSMutableArray *list = [[NSMutableArray alloc] init];
    NSLog(@&quot;%@&quot;, sql);
    [self.dbQueue inTransaction:^(FMDatabase *db, BOOL *rollback) {
        
        [db executeStatements:sql withResultBlock:^int(NSDictionary *dictionary) {
            
            [list addObject:dictionary];
            
            return 0;
        }];
        
    }];
    
    if (list.count == 1) {
        NSDictionary *dict = [list objectAtIndex:0];
        if (dict) {
            count = [[dict objectForKey:@&quot;count&quot;] intValue];
        }
    }
    NSLog(@&quot;getDBDataCount count===%d&quot;, count);
    
    return count;
}

/// 执行sql (主要用来执行插入操作)
- (unsigned)executeInsertSql:(NSString *)sql
{
    __block unsigned mid = 0;
    [self.dbQueue inTransaction:^(FMDatabase *db, BOOL *rollback) {
        NSLog(@&quot;%@&quot;, sql);
        BOOL success = [db executeStatements:sql];
        NSLog(@&quot;sql语句执行成功 %d&quot;, success);
        sqlite_int64 lastId = [db lastInsertRowId];
        mid = (unsigned)lastId;
    }];
    
    return mid;
}

/// 更新操作，删除操作
- (void)executeUpdateSql:(NSString *)sql
{
    [self.dbQueue inTransaction:^(FMDatabase *db, BOOL *rollback) {
        NSLog(@&quot;%@&quot;, sql);
        BOOL success = [db executeStatements:sql];
        NSLog(@&quot;sql语句执行成功 %d&quot;, success);
    }];
}

/// 关闭数据库
- (void)closeDatabase
{
    [self.dataBase close];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大体意思是将每个sql操作都放入一个同步线程里，这样就不会有同时操作表的情况出现了。&lt;/p&gt;

&lt;p&gt;详情代码参考，&lt;a href=&quot;https://github.com/xpmozong/Socket&quot; target=&quot;_blank&quot;&gt;https://github.com/xpmozong/Socket&lt;/a&gt;，WeiWei这个项目。&lt;/p&gt;

</description>
        <pubDate>Wed, 05 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://xpmozong.github.io/ios/2014/11/05/ios-fmdb-sqlite/</link>
        <guid isPermaLink="true">http://xpmozong.github.io/ios/2014/11/05/ios-fmdb-sqlite/</guid>
        
        <category>iOS</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>iOS 正则表达式</title>
        <description>&lt;p&gt;熟悉php的都知道preg_match_all是一个超级强大的正则表达式函数。在数据采集的世界里，有了她，几乎是所向披靡，神挡杀神，佛挡杀佛。&lt;/p&gt;

&lt;p&gt;由于Object-C有没有类似preg_match_all的函数。 NSPredicate 不是很理想。而RegexKit很强大。&lt;/p&gt;

&lt;p&gt;下载地址：&lt;a href=&quot;https://github.com/wezm/RegexKitLite&quot;&gt;RegexKit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;需要添加一个依懒库：libicucore.dylib&lt;/p&gt;

&lt;p&gt;具体用法，首先引入头文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#import &quot;RegexKitLite.h&quot;

ASIHTTPRequest *htmlRequest = [ASIHTTPRequest requestWithURL:[NSURL URLWithString:str]];
[htmlRequest setRequestMethod:@&quot;GET&quot;];
[htmlRequest setTimeOutSeconds:30];
[htmlRequest setCompletionBlock:^{
    NSString *resultStr = [[[NSString alloc] initWithData:htmlRequest.responseData encoding:NSUTF8StringEncoding] autorelease];
    NSString *parten = @&quot;&amp;lt;a class=\&quot;v-link\&quot; href=\&quot;(.*)\&quot; target=\&quot;video\&quot; title=\&quot;(.*)\&quot;&amp;gt;&amp;lt;/a&amp;gt;&quot;;
    NSArray *resultArray = [resultStr arrayOfCaptureComponentsMatchedByRegex:parten];
    NSLog(@&quot;%@&quot;, resultArray);
}];
[htmlRequest startSynchronous];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可根据自己的需要 重写&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSString *parten = @&quot;&amp;lt;a class=\&quot;v-link\&quot; href=\&quot;(.*)\&quot; target=\&quot;video\&quot; title=\&quot;(.*)\&quot;&amp;gt;&amp;lt;/a&amp;gt;&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好了，就说到这里。&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Jun 2014 00:00:00 +0800</pubDate>
        <link>http://xpmozong.github.io/ios/2014/06/21/ios-zhengze/</link>
        <guid isPermaLink="true">http://xpmozong.github.io/ios/2014/06/21/ios-zhengze/</guid>
        
        <category>iOS</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>IOS 单例设计模式</title>
        <description>&lt;p&gt;IOS单例设计模式，多个页面共用数据。&lt;/p&gt;

&lt;p&gt;创建Singleton类，继承NSObject，Singleton.h的内容为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface Singleton : NSObject
// 单例， 类只有唯一的一个实例
+ (Singleton *)sharedSingleton;
@property (nonatomic, retain) UIButton *b;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Singleton.m的内容为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation Singleton
static Singleton *s = nil;
+ (Singleton *)sharedSingleton
{
    if (s == nil) {
        s = [[Singleton alloc] init];
    }
    return s;
}
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：单例中的alloc是不能释放的。&lt;/p&gt;

&lt;p&gt;调用：第一个页面：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Singleton sharedSingleton].b = _btn1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第n个页面：使用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[[Singleton sharedSingleton].b setTitle:_textField.text forState:UIControlStateNormal];
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Fri, 25 Apr 2014 00:00:00 +0800</pubDate>
        <link>http://xpmozong.github.io/oc/2014/04/25/oc-danli/</link>
        <guid isPermaLink="true">http://xpmozong.github.io/oc/2014/04/25/oc-danli/</guid>
        
        <category>iOS</category>
        
        
        <category>OC</category>
        
      </item>
    
      <item>
        <title>iOS target/action设计模式</title>
        <description>&lt;p&gt;iOS中，有一种target/action设计模式，可以使代码高聚合，低耦合。&lt;/p&gt;

&lt;p&gt;创建一个ActionView类&lt;/p&gt;

&lt;p&gt;ActionView.h的文件内容为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface ActionView : UIView
@property (nonatomic, assign) id  target;
@property (nonatomic, assign) SEL action;
- (id)initWithFrame:(CGRect)frame target:(id)target action:(SEL)action;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ActionView.m的文件内容为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (id)initWithFrame:(CGRect)frame target:(id)target action:(SEL)action
{
    self = [super initWithFrame:frame];
    if (self) {
        self.target = target;
        self.action = action;
    }
    return self;
}
- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event
{
    [_target performSelector:_action withObject:self];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;控制层引入ActionView.h文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ActionView *actionView = [[ActionView alloc] initWithFrame:CGRectMake(100, 100, 100, 100) target:self action:@selector(changeColor:)];
actionView.backgroundColor = [UIColor blueColor];
[self.view addSubview:actionView];
[actionView release];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实现自定义的changeColor方法。&lt;/p&gt;

&lt;p&gt;此过程就是target/action设计模式的实现过程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;target/action和delegate对比&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;target…action&lt;/p&gt;

&lt;p&gt;作用：降低耦合性（解耦）&lt;/p&gt;

&lt;p&gt;机制：类内部target去执行action方法，参数self&lt;/p&gt;

&lt;p&gt;特点：外界指定target和action&lt;/p&gt;

&lt;p&gt;注意事项：如果action没实现，程序会crash&lt;/p&gt;

&lt;p&gt;专注点：通常仅仅是为了触发target的action事件&lt;/p&gt;

&lt;p&gt;delegate&lt;/p&gt;

&lt;p&gt;作用：降低耦合性（解耦）&lt;/p&gt;

&lt;p&gt;机制：delegate去执行协议中的方法，参数self&lt;/p&gt;

&lt;p&gt;特点：外界仅能指定delegate，不能指定action，action在协议中已经声明&lt;/p&gt;

&lt;p&gt;注意事项：如果request方法没实现，程序会crash，如果@optional方法没实现，程序不会crash。&lt;/p&gt;

&lt;p&gt;专注点：一系列相关事件的处理（多个事件）&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Apr 2014 00:00:00 +0800</pubDate>
        <link>http://xpmozong.github.io/ios/2014/04/16/ios-target-action/</link>
        <guid isPermaLink="true">http://xpmozong.github.io/ios/2014/04/16/ios-target-action/</guid>
        
        <category>iOS</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>OC protocal 的使用</title>
        <description>&lt;p&gt;Protocal又名协议，协议是一套标准（一堆方法的声明），只有.h文件。&lt;/p&gt;

&lt;p&gt;接受协议的对象，实现协议中定义的方法。&lt;/p&gt;

&lt;p&gt;新建文件，选择Objective-C protocal，名字为 MarrayProtocol&lt;/p&gt;

&lt;p&gt;Protocal 以 @protocal，以@end结束，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@protocol MarrayProtocol &amp;lt;NSObject&amp;gt;
@required
- (void)makeMoney;
@optional
- (void)washcloth;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@required后的方法是必须实现的，@required可写可不写。&lt;/p&gt;

&lt;p&gt;@optional后方法是可选实现的，可实现，可不实现。&lt;/p&gt;

&lt;p&gt;协议定义好之后，需要有类去遵守这个协议，实现协议里的方法。&lt;/p&gt;

&lt;p&gt;遵守协议，即在.h文件的父类名后写上&lt;协议名&gt;。实现协议里的方法即在.m文件中实现协议中的方法。相当于给这个类添加了若干个方法。这个类的实例就可以调用这些方法。&lt;/协议名&gt;&lt;/p&gt;

&lt;p&gt;如何使用代理呢？通常情况下，我们用delegate，新建文件，选择Objective-C protocal，名字为 MarrayDelegate&lt;/p&gt;

&lt;p&gt;内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@protocol MarrayDelegate &amp;lt;NSObject&amp;gt;
@required
- (void)makeMoney;
@optional
- (void)washcloth;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之前的MarrayProtocol.h文件不要了。&lt;/p&gt;

&lt;p&gt;创建Husband类， Husband.h内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#import &quot;MarrayDelegate.h&quot;
@interface Husband : NSObject &amp;lt;MarrayDelegate&amp;gt;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MarrayDelegate 遵守协议。&lt;/p&gt;

&lt;p&gt;Husband.m文件内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation Husband
- (void)makeMoney
{
    NSLog(@&quot;给老婆挣钱！&quot;);
}
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实现代理里面的方法。&lt;/p&gt;

&lt;p&gt;创建Wife类，Wife.h文件内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#import &quot;MarrayDelegate.h&quot;
@interface Wife : NSObject
@property (nonatomic, assign) id&amp;lt;MarrayDelegate&amp;gt;delegate;
- (void)shopping;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将代理名称设为delegate，添加一个方法。&lt;/p&gt;

&lt;p&gt;Wife.m文件内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation Wife
- (void)shopping
{
    NSLog(@&quot;老公，我要购物！&quot;);
    [_delegate makeMoney];
}
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;设置代理，和实现方法。&lt;/p&gt;

&lt;p&gt;在主函数import husband.h 和 wife.h 文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Husband *husband = [[Husband alloc] init];
Wife *wife = [[Wife alloc] init];
wife.delegate = husband;
[wife shopping];
[wife release];
[husband release];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;老公，我要购物！
给老婆挣钱！
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;整个过程就是实现协议代理的过程。&lt;/p&gt;

</description>
        <pubDate>Sat, 12 Apr 2014 00:00:00 +0800</pubDate>
        <link>http://xpmozong.github.io/oc/2014/04/12/oc-protocal/</link>
        <guid isPermaLink="true">http://xpmozong.github.io/oc/2014/04/12/oc-protocal/</guid>
        
        <category>iOS</category>
        
        <category>OC</category>
        
        
        <category>OC</category>
        
      </item>
    
  </channel>
</rss>
